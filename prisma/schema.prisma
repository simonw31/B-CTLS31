generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                String        @id @default(uuid())
  matricule         Int?          @unique
  nom               String
  prenom            String
  dateNaissance     DateTime
  sexe              Sexe
  nationalite       String
  adresse           String
  complementAdresse String?
  codePostal        String
  ville             String
  iban              String
  bic               String
  securiteSociale   String
  urgenceNom        String
  urgencePrenom     String
  urgenceTel        String
  moyenTransport    String?
  dateCreation      DateTime      @default(now())
  dateMiseAJour     DateTime      @updatedAt
  actif             Boolean       @default(true)
  contracts         Contract[]
  payVariables      PayVariable[]
  timeEntries       TimeEntry[]
}

model Contract {
  id                     String         @id @default(uuid())
  employeeId             String
  type                   TypeContrat
  role                   Role
  heuresContrat          Float
  statut                 StatutContrat
  dateDebut              DateTime
  dateFin                DateTime?
  dateDemissionEffective DateTime?
  dateSuppressionPrevue  DateTime?
  dateCreation           DateTime       @default(now())
  dateMiseAJour          DateTime       @updatedAt
  amendments             Amendment[]
  availabilities         Availability[]
  employee               Employee       @relation(fields: [employeeId], references: [id])
}

model Amendment {
  id            String      @id @default(uuid())
  contractId    String
  type          TypeAvenant
  dateDebut     DateTime
  dateFin       DateTime?
  role          Role?
  heuresContrat Float?
  dateCreation  DateTime    @default(now())
  dateMiseAJour DateTime    @updatedAt
  contract      Contract    @relation(fields: [contractId], references: [id])
}

model Availability {
  id            String   @id @default(uuid())
  contractId    String
  jour          Jour
  plages        Json
  dateCreation  DateTime @default(now())
  dateMiseAJour DateTime @updatedAt
  contract      Contract @relation(fields: [contractId], references: [id])
}

model TimeEntry {
  id          String        @id @default(uuid())
  employeeId  String
  planningId  String?
  date        DateTime
  heureEntree String
  heureSortie String
  type        TypeTimeEntry
  createdAt   DateTime      @default(now())
  employee    Employee      @relation(fields: [employeeId], references: [id])
}

model Planning {
  id        String   @id @default(uuid())
  semaine   DateTime
  label     String
  createdAt DateTime @default(now())
}

model PayVariable {
  id                String   @id @default(uuid())
  employeeId        String
  periodeDebut      DateTime
  periodeFin        DateTime
  heuresTravaillees Float
  absences          Float
  heuresSupp        Float
  createdAt         DateTime @default(now())
  employee          Employee @relation(fields: [employeeId], references: [id])
}

enum Sexe {
  homme
  femme
  autre
}

enum TypeContrat {
  CDI
  CDD
  Autre
}

enum Role {
  employe_polyvalent
  responsable
  assistant_manager
  manager
}

enum StatutContrat {
  en_contrat
  demission
}

enum TypeAvenant {
  avenant
  modif_permanente
}

enum Jour {
  lundi
  mardi
  mercredi
  jeudi
  vendredi
  samedi
  dimanche
}

enum TypeTimeEntry {
  planifie
  reel
}
